{
  "package.json": "{\n  \"name\": \"all-video-downloader\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\",\n    \"server\": \"node server/index.js\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.3.0\",\n    \"react-dom\": \"^18.3.0\",\n    \"axios\": \"^1.6.0\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.0.0\",\n    \"tailwindcss\": \"^3.4.0\",\n    \"autoprefixer\": \"^10.4.0\",\n    \"postcss\": \"^8.4.0\",\n    \"express\": \"^4.18.0\",\n    \"cors\": \"^2.8.5\",\n    \"apify-client\": \"^2.8.0\"\n  }\n}",
  "postcss.config.js": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  }\n}\n",
  "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: 'class',\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\"\n  ],\n  theme: {\n    extend: {\n      animation: {\n        fadeIn: \"fadeIn 0.6s ease-in-out\",\n        slideUp: \"slideUp 0.5s ease-out\",\n        bounce: \"bounce 2s infinite\",\n        pulse: \"pulse 2s infinite\"\n      },\n      keyframes: {\n        fadeIn: {\n          \"0%\": { opacity: 0, transform: \"translateY(20px)\" },\n          \"100%\": { opacity: 1, transform: \"translateY(0)\" }\n        },\n        slideUp: {\n          \"0%\": { opacity: 0, transform: \"translateY(40px)\" },\n          \"100%\": { opacity: 1, transform: \"translateY(0)\" }\n        }\n      }\n    }\n  },\n  plugins: []\n}\n",
  "src/index.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  @apply bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300;\n}\n\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-200 dark:bg-gray-700;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-400 dark:bg-gray-500 rounded;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-500 dark:bg-gray-400;\n}\n",
  "src/main.jsx": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.jsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n",
  "src/App.jsx": "import React, { useEffect, useState } from 'react'\nimport Header from './components/Header'\nimport DownloadTabs from './components/DownloadTabs'\nimport ThemeToggle from './components/ThemeToggle'\nimport Footer from './components/Footer'\n\nexport default function App() {\n  const [darkMode, setDarkMode] = useState(false)\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme')\n    const isDark = savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)\n    setDarkMode(isDark)\n    document.documentElement.classList.toggle('dark', isDark)\n  }, [])\n\n  const toggleTheme = () => {\n    const newTheme = !darkMode\n    setDarkMode(newTheme)\n    localStorage.setItem('theme', newTheme ? 'dark' : 'light')\n    document.documentElement.classList.toggle('dark', newTheme)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 transition-all duration-300\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"text-center mb-8 animate-fadeIn\">\n          <h1 className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-4\">\n            🎬 All Video Downloader\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Download videos from TikTok, YouTube, and Instagram with ease!\n          </p>\n        </div>\n        <DownloadTabs />\n      </main>\n      <Footer />\n      <ThemeToggle darkMode={darkMode} toggleTheme={toggleTheme} />\n    </div>\n  )\n}\n",
  "src/components/Header.jsx": "import React from 'react'\n\nexport default function Header() {\n  return (\n    <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-40\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-lg\">\n              📱\n            </div>\n            <span className=\"text-xl font-bold text-gray-900 dark:text-white\">\n              VideoDownloader\n            </span>\n          </div>\n          <nav className=\"hidden md:flex gap-6\">\n            <a href=\"#tiktok\" className=\"text-gray-600 dark:text-gray-300 hover:text-purple-600 transition\">\n              TikTok\n            </a>\n            <a href=\"#youtube\" className=\"text-gray-600 dark:text-gray-300 hover:text-red-600 transition\">\n              YouTube\n            </a>\n            <a href=\"#instagram\" className=\"text-gray-600 dark:text-gray-300 hover:text-pink-600 transition\">\n              Instagram\n            </a>\n          </nav>\n        </div>\n      </div>\n    </header>\n  )\n}\n",
  "src/components/DownloadTabs.jsx": "import React, { useState } from 'react'\nimport TikTokDownloader from './TikTokDownloader'\nimport YouTubeDownloader from './YouTubeDownloader'\nimport InstagramDownloader from './InstagramDownloader'\n\nconst tabs = [\n  { id: 'tiktok', label: '🎵 TikTok', icon: '🎵', color: 'from-pink-500 to-red-500' },\n  { id: 'youtube', label: '🎬 YouTube', icon: '🎬', color: 'from-red-500 to-red-600' },\n  { id: 'instagram', label: '📷 Instagram', icon: '📷', color: 'from-purple-500 to-pink-500' }\n]\n\nexport default function DownloadTabs() {\n  const [activeTab, setActiveTab] = useState('tiktok')\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case 'tiktok':\n        return <TikTokDownloader />\n      case 'youtube':\n        return <YouTubeDownloader />\n      case 'instagram':\n        return <InstagramDownloader />\n      default:\n        return <TikTokDownloader />\n    }\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden animate-fadeIn\">\n      <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n        {tabs.map((tab) => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex-1 py-4 px-6 text-sm font-semibold transition-all duration-300 ${\n              activeTab === tab.id\n                ? `bg-gradient-to-r ${tab.color} text-white shadow-lg`\n                : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n            }`}\n          >\n            <span className=\"text-lg mr-2\">{tab.icon}</span>\n            {tab.label}\n          </button>\n        ))}\n      </div>\n      \n      <div className=\"p-6 min-h-[400px]\">\n        {renderContent()}\n      </div>\n    </div>\n  )\n}\n",
  "src/components/TikTokDownloader.jsx": "import React, { useState } from 'react'\nimport { downloadVideo } from '../services/api'\nimport DownloadForm from './DownloadForm'\nimport VideoResult from './VideoResult'\n\nexport default function TikTokDownloader() {\n  const [loading, setLoading] = useState(false)\n  const [result, setResult] = useState(null)\n  const [error, setError] = useState('')\n\n  const handleDownload = async (url) => {\n    if (!url.includes('tiktok.com')) {\n      setError('Please enter a valid TikTok URL')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n    setResult(null)\n\n    try {\n      const data = await downloadVideo(url, 'tiktok')\n      setResult(data)\n    } catch (err) {\n      setError('Failed to download video. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          🎵 TikTok Video Downloader\n        </h3>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          Download TikTok videos without watermark in high quality\n        </p>\n      </div>\n\n      <DownloadForm\n        onSubmit={handleDownload}\n        loading={loading}\n        placeholder=\"Paste TikTok video URL here...\"\n        buttonText=\"Download TikTok Video\"\n        buttonColor=\"bg-gradient-to-r from-pink-500 to-red-500 hover:from-pink-600 hover:to-red-600\"\n      />\n\n      {error && (\n        <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n          <p className=\"text-red-600 dark:text-red-400 text-center\">{error}</p>\n        </div>\n      )}\n\n      {result && <VideoResult data={result} platform=\"tiktok\" />}\n    </div>\n  )\n}\n",
  "src/components/YouTubeDownloader.jsx": "import React, { useState } from 'react'\nimport { downloadVideo } from '../services/api'\nimport DownloadForm from './DownloadForm'\nimport VideoResult from './VideoResult'\n\nexport default function YouTubeDownloader() {\n  const [loading, setLoading] = useState(false)\n  const [result, setResult] = useState(null)\n  const [error, setError] = useState('')\n\n  const handleDownload = async (url) => {\n    if (!url.includes('youtube.com') && !url.includes('youtu.be')) {\n      setError('Please enter a valid YouTube URL')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n    setResult(null)\n\n    try {\n      const data = await downloadVideo(url, 'youtube')\n      setResult(data)\n    } catch (err) {\n      setError('Failed to download video. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          🎬 YouTube Video Downloader\n        </h3>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          Download YouTube videos in various formats and qualities\n        </p>\n      </div>\n\n      <DownloadForm\n        onSubmit={handleDownload}\n        loading={loading}\n        placeholder=\"Paste YouTube video URL here...\"\n        buttonText=\"Download YouTube Video\"\n        buttonColor=\"bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700\"\n      />\n\n      {error && (\n        <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n          <p className=\"text-red-600 dark:text-red-400 text-center\">{error}</p>\n        </div>\n      )}\n\n      {result && <VideoResult data={result} platform=\"youtube\" />}\n    </div>\n  )\n}\n",
  "src/components/InstagramDownloader.jsx": "import React, { useState } from 'react'\nimport { downloadVideo } from '../services/api'\nimport DownloadForm from './DownloadForm'\nimport VideoResult from './VideoResult'\n\nexport default function InstagramDownloader() {\n  const [loading, setLoading] = useState(false)\n  const [result, setResult] = useState(null)\n  const [error, setError] = useState('')\n\n  const handleDownload = async (url) => {\n    if (!url.includes('instagram.com')) {\n      setError('Please enter a valid Instagram URL')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n    setResult(null)\n\n    try {\n      const data = await downloadVideo(url, 'instagram')\n      setResult(data)\n    } catch (err) {\n      setError('Failed to download video. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          📷 Instagram Reels Downloader\n        </h3>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          Download Instagram Reels and videos in high quality\n        </p>\n      </div>\n\n      <DownloadForm\n        onSubmit={handleDownload}\n        loading={loading}\n        placeholder=\"Paste Instagram video/reel URL here...\"\n        buttonText=\"Download Instagram Video\"\n        buttonColor=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n      />\n\n      {error && (\n        <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n          <p className=\"text-red-600 dark:text-red-400 text-center\">{error}</p>\n        </div>\n      )}\n\n      {result && <VideoResult data={result} platform=\"instagram\" />}\n    </div>\n  )\n}\n",
  "src/components/DownloadForm.jsx": "import React, { useState } from 'react'\n\nexport default function DownloadForm({ onSubmit, loading, placeholder, buttonText, buttonColor }) {\n  const [url, setUrl] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (url.trim()) {\n      onSubmit(url.trim())\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"relative\">\n        <input\n          type=\"url\"\n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          placeholder={placeholder}\n          className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-xl focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-colors\"\n          disabled={loading}\n          required\n        />\n        {loading && (\n          <div className=\"absolute right-3 top-3\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-2 border-blue-500 border-t-transparent\"></div>\n          </div>\n        )}\n      </div>\n      \n      <button\n        type=\"submit\"\n        disabled={loading || !url.trim()}\n        className={`w-full py-3 px-6 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none ${buttonColor} shadow-lg`}\n      >\n        {loading ? (\n          <span className=\"flex items-center justify-center gap-2\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\"></div>\n            Processing...\n          </span>\n        ) : (\n          buttonText\n        )}\n      </button>\n    </form>\n  )\n}\n",
  "src/components/VideoResult.jsx": "import React from 'react'\n\nexport default function VideoResult({ data, platform }) {\n  if (!data) return null\n\n  const handleDownload = (url, filename) => {\n    const link = document.createElement('a')\n    link.href = url\n    link.download = filename || 'video'\n    link.target = '_blank'\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n  }\n\n  const renderTikTokResult = () => (\n    <div className=\"bg-gradient-to-r from-pink-50 to-red-50 dark:from-pink-900/20 dark:to-red-900/20 rounded-xl p-6\">\n      <div className=\"flex items-center gap-4 mb-4\">\n        {data.thumbnail && (\n          <img\n            src={data.thumbnail}\n            alt=\"Video thumbnail\"\n            className=\"w-20 h-20 rounded-lg object-cover\"\n          />\n        )}\n        <div className=\"flex-1\">\n          <h4 className=\"font-semibold text-gray-900 dark:text-white\">{data.title || 'TikTok Video'}</h4>\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">@{data.author || 'unknown'}</p>\n        </div>\n      </div>\n      \n      {data.videoUrl && (\n        <button\n          onClick={() => handleDownload(data.videoUrl, `tiktok_${Date.now()}.mp4`)}\n          className=\"w-full py-3 px-4 bg-gradient-to-r from-pink-500 to-red-500 hover:from-pink-600 hover:to-red-600 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105\"\n        >\n          📥 Download Video (No Watermark)\n        </button>\n      )}\n    </div>\n  )\n\n  const renderYouTubeResult = () => (\n    <div className=\"bg-gradient-to-r from-red-50 to-red-50 dark:from-red-900/20 dark:to-red-900/20 rounded-xl p-6\">\n      <div className=\"flex items-center gap-4 mb-4\">\n        {data.thumbnail && (\n          <img\n            src={data.thumbnail}\n            alt=\"Video thumbnail\"\n            className=\"w-20 h-20 rounded-lg object-cover\"\n          />\n        )}\n        <div className=\"flex-1\">\n          <h4 className=\"font-semibold text-gray-900 dark:text-white\">{data.title || 'YouTube Video'}</h4>\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">{data.author || 'Unknown Channel'}</p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        {data.formats?.map((format, index) => (\n          <button\n            key={index}\n            onClick={() => handleDownload(format.url, `youtube_${data.title || Date.now()}.${format.ext}`)}\n            className=\"w-full py-2 px-4 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-medium rounded-lg transition-all duration-300 flex items-center justify-between\"\n          >\n            <span>📥 {format.quality} - {format.ext?.toUpperCase()}</span>\n            <span className=\"text-sm opacity-80\">{format.filesize || 'Unknown size'}</span>\n          </button>\n        )) || (\n          <button\n            onClick={() => handleDownload(data.videoUrl, `youtube_${Date.now()}.mp4`)}\n            className=\"w-full py-3 px-4 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105\"\n          >\n            📥 Download Video\n          </button>\n        )}\n      </div>\n    </div>\n  )\n\n  const renderInstagramResult = () => (\n    <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-6\">\n      <div className=\"flex items-center gap-4 mb-4\">\n        {data.thumbnail && (\n          <img\n            src={data.thumbnail}\n            alt=\"Video thumbnail\"\n            className=\"w-20 h-20 rounded-lg object-cover\"\n          />\n        )}\n        <div className=\"flex-1\">\n          <h4 className=\"font-semibold text-gray-900 dark:text-white\">{data.title || 'Instagram Video'}</h4>\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">@{data.author || 'unknown'}</p>\n        </div>\n      </div>\n      \n      {data.videoUrl && (\n        <button\n          onClick={() => handleDownload(data.videoUrl, `instagram_${Date.now()}.mp4`)}\n          className=\"w-full py-3 px-4 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105\"\n        >\n          📥 Download Video\n        </button>\n      )}\n    </div>\n  )\n\n  return (\n    <div className=\"animate-slideUp\">\n      <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">✨ Download Ready!</h4>\n      {platform === 'tiktok' && renderTikTokResult()}\n      {platform === 'youtube' && renderYouTubeResult()}\n      {platform === 'instagram' && renderInstagramResult()}\n    </div>\n  )\n}\n",
  "src/components/ThemeToggle.jsx": "import React from 'react'\n\nexport default function ThemeToggle({ darkMode, toggleTheme }) {\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"fixed bottom-6 right-6 bg-white dark:bg-gray-800 shadow-lg rounded-full p-3 z-50 transition-all duration-300 transform hover:scale-110 border border-gray-200 dark:border-gray-700\"\n      aria-label=\"Toggle Dark Mode\"\n    >\n      {darkMode ? (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" className=\"w-6 h-6 text-yellow-400\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 3v1m0 16v1m8.66-8.66l-.71.71M4.05 19.95l-.71-.71m16.97-7.07H21m-18 0H3m1.34-7.07l.71.71M19.95 4.05l.71.71\" />\n        </svg>\n      ) : (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" className=\"w-6 h-6 text-gray-700\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12.79A9 9 0 1111.21 3a7 7 0 009.79 9.79z\" />\n        </svg>\n      )}\n    </button>\n  )\n}\n",
  "src/components/Footer.jsx": "import React from 'react'\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-t border-gray-200 dark:border-gray-700 mt-12\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold\">\n              📱\n            </div>\n            <span className=\"text-xl font-bold text-gray-900 dark:text-white\">\n              All Video Downloader\n            </span>\n          </div>\n          \n          <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n            Download videos from your favorite social media platforms with ease\n          </p>\n          \n          <div className=\"flex justify-center gap-6 mb-4\">\n            <a href=\"#\" className=\"text-gray-500 hover:text-purple-600 transition\">\n              <span className=\"sr-only\">TikTok</span>\n              🎵\n            </a>\n            <a href=\"#\" className=\"text-gray-500 hover:text-red-600 transition\">\n              <span className=\"sr-only\">YouTube</span>\n              🎬\n            </a>\n            <a href=\"#\" className=\"text-gray-500 hover:text-pink-600 transition\">\n              <span className=\"sr-only\">Instagram</span>\n              📷\n            </a>\n          </div>\n          \n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n            &copy; 2025 Ryzellx. Made with ❤️ for video lovers.\n          </p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n",
  "src/services/api.js": "import axios from 'axios'\n\nconst API_BASE_URL = 'http://localhost:3001/api'\n\nexport const downloadVideo = async (url, platform) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/download`, {\n      url,\n      platform\n    })\n    \n    return response.data\n  } catch (error) {\n    console.error('Download error:', error)\n    throw new Error(error.response?.data?.message || 'Download failed')\n  }\n}\n\nexport const getVideoInfo = async (url, platform) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/info`, {\n      url,\n      platform\n    })\n    \n    return response.data\n  } catch (error) {\n    console.error('Info error:', error)\n    throw new Error(error.response?.data?.message || 'Failed to get video info')\n  }\n}\n",
  "server/index.js": "const express = require('express')\nconst cors = require('cors')\nconst { ApifyClient } = require('apify-client')\n\nconst app = express()\nconst PORT = process.env.PORT || 3001\n\n// Initialize Apify client with your API token\nconst client = new ApifyClient({\n  token: 'apify_api_1fQmA1YqvlkChXDbYcHXNUnbaJDDFw1VLSeD'\n})\n\n// Middleware\napp.use(cors())\napp.use(express.json())\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() })\n})\n\n// Download endpoint\napp.post('/api/download', async (req, res) => {\n  try {\n    const { url, platform } = req.body\n\n    if (!url || !platform) {\n      return res.status(400).json({ error: 'URL and platform are required' })\n    }\n\n    let result\n    switch (platform) {\n      case 'tiktok':\n        result = await downloadTikTok(url)\n        break\n      case 'youtube':\n        result = await downloadYouTube(url)\n        break\n      case 'instagram':\n        result = await downloadInstagram(url)\n        break\n      default:\n        return res.status(400).json({ error: 'Unsupported platform' })\n    }\n\n    res.json(result)\n  } catch (error) {\n    console.error('Download error:', error)\n    res.status(500).json({ error: 'Download failed', message: error.message })\n  }\n})\n\n// Get video info endpoint\napp.post('/api/info', async (req, res) => {\n  try {\n    const { url, platform } = req.body\n\n    if (!url || !platform) {\n      return res.status(400).json({ error: 'URL and platform are required' })\n    }\n\n    // Same logic as download but only return metadata\n    let result\n    switch (platform) {\n      case 'tiktok':\n        result = await downloadTikTok(url)\n        break\n      case 'youtube':\n        result = await downloadYouTube(url)\n        break\n      case 'instagram':\n        result = await downloadInstagram(url)\n        break\n      default:\n        return res.status(400).json({ error: 'Unsupported platform' })\n    }\n\n    // Remove download URLs for info endpoint\n    const info = { ...result }\n    delete info.videoUrl\n    delete info.formats\n    \n    res.json(info)\n  } catch (error) {\n    console.error('Info error:', error)\n    res.status(500).json({ error: 'Failed to get video info', message: error.message })\n  }\n})\n\n// TikTok download function\nasync function downloadTikTok(url) {\n  const input = {\n    urls: [url],\n    proxy: {\n      useApifyProxy: true\n    }\n  }\n\n  const run = await client.actor('apilabs/tiktok-downloader').call(input)\n  const { items } = await client.dataset(run.defaultDatasetId).listItems()\n\n  if (!items || items.length === 0) {\n    throw new Error('No data found for TikTok video')\n  }\n\n  const item = items[0]\n  return {\n    platform: 'tiktok',\n    title: item.text || 'TikTok Video',\n    author: item.authorMeta?.nickName || item.authorMeta?.name || 'Unknown',\n    thumbnail: item.covers?.[0] || item.dynamicCover || null,\n    videoUrl: item.videoUrl || item.videoUrlNoWaterMark || null,\n    duration: item.duration || null,\n    views: item.stats?.playCount || null,\n    likes: item.stats?.diggCount || null,\n    shares: item.stats?.shareCount || null,\n    comments: item.stats?.commentCount || null\n  }\n}\n\n// YouTube download function\nasync function downloadYouTube(url) {\n  const input = {\n    videos: [{ url }]\n  }\n\n  const run = await client.actor('streamers/youtube-video-downloader').call(input)\n  const { items } = await client.dataset(run.defaultDatasetId).listItems()\n\n  if (!items || items.length === 0) {\n    throw new Error('No data found for YouTube video')\n  }\n\n  const item = items[0]\n  return {\n    platform: 'youtube',\n    title: item.title || 'YouTube Video',\n    author: item.uploader || item.channel || 'Unknown Channel',\n    thumbnail: item.thumbnail || null,\n    videoUrl: item.url || null,\n    duration: item.duration || null,\n    views: item.view_count || null,\n    description: item.description || null,\n    uploadDate: item.upload_date || null,\n    formats: item.formats?.map(format => ({\n      quality: format.format_note || format.height ? `${format.height}p` : 'Unknown',\n      ext: format.ext || 'mp4',\n      url: format.url,\n      filesize: format.filesize ? formatFileSize(format.filesize) : null\n    })) || null\n  }\n}\n\n// Instagram download function\nasync function downloadInstagram(url) {\n  const input = {\n    startUrls: [{ url }],\n    proxy: {\n      useApifyProxy: true\n    },\n    maxRequestRetries: 10\n  }\n\n  const run = await client.actor('pocesar/download-instagram-video').call(input)\n  const { items } = await client.dataset(run.defaultDatasetId).listItems()\n\n  if (!items || items.length === 0) {\n    throw new Error('No data found for Instagram video')\n  }\n\n  const item = items[0]\n  return {\n    platform: 'instagram',\n    title: item.caption || 'Instagram Video',\n    author: item.ownerUsername || 'Unknown',\n    thumbnail: item.displayUrl || item.thumbnailSrc || null,\n    videoUrl: item.videoUrl || null,\n    views: item.videoViewCount || null,\n    likes: item.likesCount || null,\n    comments: item.commentsCount || null,\n    timestamp: item.timestamp || null\n  }\n}\n\n// Utility function to format file size\nfunction formatFileSize(bytes) {\n  if (!bytes) return null\n  const sizes = ['Bytes', 'KB', 'MB', 'GB']\n  if (bytes === 0) return '0 Bytes'\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i]\n}\n\n// Error handling middleware\napp.use((error, req, res, next) => {\n  console.error('Server error:', error)\n  res.status(500).json({ error: 'Internal server error', message: error.message })\n})\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({ error: 'Endpoint not found' })\n})\n\napp.listen(PORT, () => {\n  console.log(`🚀 Server running on port ${PORT}`)\n  console.log(`📱 Frontend URL: http://localhost:5173`)\n  console.log(`🔗 API URL: http://localhost:${PORT}/api`)\n  console.log(`💚 Health check: http://localhost:${PORT}/health`)\n})\n",
  "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>All Video Downloader - TikTok, YouTube, Instagram</title>\n    <meta name=\"description\" content=\"Download videos from TikTok, YouTube, and Instagram with ease. High quality, no watermark downloads.\" />\n    <meta name=\"keywords\" content=\"video downloader, tiktok downloader, youtube downloader, instagram downloader, social media, video download\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>\n",
  "README.md": "# 🎬 All Video Downloader\n\nA modern, responsive web application for downloading videos from TikTok, YouTube, and Instagram. Built with React, TailwindCSS, and powered by Apify APIs.\n\n## ✨ Features\n\n- **Multi-Platform Support**: Download from TikTok, YouTube, and Instagram\n- **High Quality Downloads**: Get videos in the best available quality\n- **No Watermark**: TikTok videos downloaded without watermark\n- **Dark/Light Mode**: Toggle between themes\n- **Responsive Design**: Works perfectly on desktop, tablet, and mobile\n- **Real-time Processing**: Live download status updates\n- **Modern UI**: Clean, intuitive interface with smooth animations\n\n## 🚀 Tech Stack\n\n- **Frontend**: React 18, TailwindCSS, Vite\n- **Backend**: Node.js, Express\n- **APIs**: Apify (TikTok, YouTube, Instagram downloaders)\n- **HTTP Client**: Axios\n\n## 📦 Installation\n\n1. **Clone the repository**:\n   ```bash\n   git clone <repository-url>\n   cd all-video-downloader\n   ```\n\n2. **Install dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Start the backend server**:\n   ```bash\n   npm run server\n   ```\n\n4. **Start the frontend development server**:\n   ```bash\n   npm run dev\n   ```\n\n5. **Open your browser** and go to `http://localhost:5173`\n\n## 🔧 Configuration\n\nThe Apify API token is already configured in the server. If you need to change it, update the token in `server/index.js`:\n\n```javascript\nconst client = new ApifyClient({\n  token: 'your-apify-api-token-here'\n})\n```\n\n## 🌐 API Endpoints\n\n### POST `/api/download`\nDownload a video from supported platforms.\n\n**Request Body**:\n```json\n{\n  \"url\": \"https://www.tiktok.com/@user/video/123\",\n  \"platform\": \"tiktok\"\n}\n```\n\n**Response**:\n```json\n{\n  \"platform\": \"tiktok\",\n  \"title\": \"Video Title\",\n  \"author\": \"@username\",\n  \"thumbnail\": \"https://...\",\n  \"videoUrl\": \"https://...\",\n  \"duration\": 30,\n  \"views\": 1000000\n}\n```\n\n### POST `/api/info`\nGet video information without download links.\n\n### GET `/health`\nHealth check endpoint.\n\n## 📱 Supported Platforms\n\n| Platform | Features | Quality |\n|----------|----------|----------|\n| **TikTok** | ✅ No watermark<br>✅ Original quality<br>✅ Video metadata | HD |\n| **YouTube** | ✅ Multiple formats<br>✅ Various qualities<br>✅ Audio extraction | Up to 4K |\n| **Instagram** | ✅ Reels support<br>✅ Posts & stories<br>✅ High quality | HD |\n\n## 🎨 UI Features\n\n- **Responsive Design**: Optimized for all screen sizes\n- **Dark/Light Theme**: Auto-detection with manual toggle\n- **Smooth Animations**: CSS transitions and keyframes\n- **Loading States**: Real-time feedback during processing\n- **Error Handling**: User-friendly error messages\n- **Modern Gradient Buttons**: Platform-specific color schemes\n\n## 📄 File Structure\n\n```\n├── src/\n│   ├── components/\n│   │   ├── Header.jsx\n│   │   ├── DownloadTabs.jsx\n│   │   ├── TikTokDownloader.jsx\n│   │   ├── YouTubeDownloader.jsx\n│   │   ├── InstagramDownloader.jsx\n│   │   ├── DownloadForm.jsx\n│   │   ├── VideoResult.jsx\n│   │   ├── ThemeToggle.jsx\n│   │   └── Footer.jsx\n│   ├── services/\n│   │   └── api.js\n│   ├── App.jsx\n│   ├── main.jsx\n│   └── index.css\n├── server/\n│   └── index.js\n├── package.json\n├── tailwind.config.js\n└── README.md\n```\n\n## 🚀 Deployment\n\n### Frontend (Vercel/Netlify)\n1. Build the project: `npm run build`\n2. Deploy the `dist` folder\n3. Update API base URL in `src/services/api.js`\n\n### Backend (Railway/Heroku)\n1. Deploy the server folder\n2. Set environment variables\n3. Update CORS settings for your domain\n\n## 📝 Environment Variables\n\n```env\nPORT=3001\nAPIFY_TOKEN=your-apify-token\nCORS_ORIGIN=http://localhost:5173\n```\n\n## 🛡️ Rate Limits\n\nThe application uses Apify's rate limiting. For production use, consider:\n- Implementing request queuing\n- Adding user rate limiting\n- Caching frequently requested videos\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## 📄 License\n\nMIT License - see LICENSE file for details.\n\n## 👨‍💻 Author\n\n**Ryzellx** - Full Stack Developer\n- GitHub: [@Ryzellx](https://github.com/Ryzellx)\n\n## ⚠️ Disclaimer\n\nThis tool is for personal use only. Please respect the terms of service of each platform and ensure you have the right to download the content you're accessing.\n\n---\n\n## 🆘 Support\n\nIf you encounter any issues or have questions:\n1. Check the [Issues](../../issues) section\n2. Create a new issue with detailed information\n3. Include error messages and steps to reproduce\n\nEnjoy downloading your favorite videos! 🎉\n"
}